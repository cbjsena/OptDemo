pip freeze> requirements.txt
pip install -r requirements.txt

django-admin startproject optdemo_project .

# 기본 레이아웃 및 핵심 기능을 담당할 'core' 앱 생성
python manage.py startapp core

# 'Matching' 모델 관련 기능을 담당할 'matching_app' 생성
python manage.py startapp matching_app

python manage.py startapp matching_assignment_app
python manage.py startapp resource_allocation_app
python manage.py startapp routing_logistics_app
python manage.py startapp production_scheduling_app


# (추후 필요시) 다른 모델들을 위한 앱 생성
# python manage.py startapp allocate_app
# python manage.py startapp vcr_app
복사한 후
python manage.py makemigrations
python manage.py migrate
python manage.py runserver

# rebase
1. git rebase -i HEAD~3
2. i 입력하면 텍스트 수정 모드
3. 수정 후 ESC ->:wq -> Enter

# 마지막 커밋 메시지 변경 명령어
1. git commit --amend -m "Refactor: unify validation and data generation logic"


# 빌드 docker-compose build
# 검색 docker-compose image ls
# 실행 docker-compose up
# 확인 docker container ls
# 종료 docker-compose down
# docker-compose.yml에서 volume 경로만 수정 -> docker-compose up 또는 --force-recreate
# Dockerfile 수정 또는 패키지 변경 -> docker-compose up --build

# postgresql 설치 시 인스톨
1. pip install psycopg2-binary
# db 데이터가 없으므로 초기화 하는 명령 입력(현 app은 db 사용하지 않아서 문제 없음)
2. docker 실행 후 다른 창에 입력-> docker-compose exec web python manage.py migrate

###### 전문 서버
1. pip install gunicorn
# 쿠기 등으로 잘 안되는 경우 발생 확인 위해 시크릿모드 확인 필요
# 앱별 static 폴더 대신 한곳에 모두 모음
2. python manage.py collectstatic

####### docker-compose 분리
1. docker-compose.dev.yml 복사 생성
2. docker-compose -f docker-compose.dev.yml up

####### nginx
1. docker-compose에 services에 nginx 추가
2. nginx 폴더와 하위 파일 추가

####### GCP
1. GCP 프로젝트 설정
    1.1 https://console.cloud.google.com 접속
    1.2 새 프로젝트 생성 또는 기존 프로젝트 선택
    1.3 [Cloud Shell] 또는 로컬에서 아래 명령어 실행:
        - gcloud init
        - gcloud auth login
        - gcloud config set project my-optimization-demo
2. GCR(Google Container Registry) 설정 후 이미지 푸시
Dockerfile 기반 단일 서비스로 묶는 게 좋습니다.
docker-compose로 배포는 GKE 또는 VM으로는 가능하나 GCP Cloud Run에 바로 쓰기 어려우므로,
단일 Django 웹서비스 + gunicorn + nginx로 빌드하세요.
    2.1 # Docker 이미지 빌드 (nginx + gunicorn 포함)
        - docker build -t gcr.io/my-optimization-demo/optdemo .
        - 에러 발생하면 해당 url 접속해서 Enable 선택하고 다시 실행
         Artifact Registry API has not been used in project 216727465560 before or it is disabled.
         Enable it by visiting https://console.developers.google.com/apis/api/artifactregistry.googleapis.com/overview?project=216727465560 then retry.
    2.2 빌드 시 확인해야되는 사항
         - Dockerfile
            * 작업 디렉토리 설정: WORKDIR /usr/src/app
            * 코드 복사: COPY . .
            * Python 의존성 설치: pip install -r requirements.txt
            * 정적 파일 수집 (collectstatic) 여부
            * .env 복사 또는 환경변수 처리
            * Gunicorn 실행 포트 8080으로 설정
        - env.yaml, requirements.txt
    2.3 로컬 테스트
        - Django의 runserver 대신 Gunicorn 사용 시 static 파일을 서빙하지 않음 ->Nginx를 사용하거나 runserver로 테스트
        - docker-compose up

    2.4 # GCR에 푸시
        - docker push gcr.io/my-optimization-demo/optdemo
3. Cloud Run에 배포
Cloud Run은 내부적으로 PORT=8080을 설정
    3.0 로컬 테스트는 docker-compose.yml 수정
        - ports 8000 -> 8080으로 수정 후 2번 과정 실행
        - command: gunicorn optdemo_project.wsgi:application --bind 0.0.0.0:8080
        - nginx.conf 파일 upstream optdemo{    server web:8080; }
로컬에서 확인 후 Cloud Run 배포
    3.1 Cloud SQL 인스턴스 생성
        - GCP Console → SQL → "인스턴스 만들기" → PostgreSQL 선택, Cloud Run 서비스와 동일 region 선택
        - 생성 인스턴스 클릭 후 좌측 메뉴에서 사용자, 데이터베이스 차례로 선택해서 생성
        - Cloud SQL 인스턴스 연결 이름 확인 ex) my-optimization-demo:asia-northeast3:my-optimization-db
    3.2 Cloud SQL IAM 권한 부여
        - 서비스 계정 확인: gcloud run services describe optdemo --platform=managed --region=asia-northeast3
            * 하단에 Service account 정보 확인
        - Cloud Run 서비스 계정이 Cloud SQL에 접근할 권한 부여
            * Cloud Run은 기본적으로 서비스 계정을 사용해 실행함. 이 계정이 Cloud SQL에 접속하도록 Cloud SQL Client 역할 부여 필요.
            * gcloud projects add-iam-policy-binding my-optimization-demo --member="serviceAccount:216727465560-compute@developer.gserviceaccount.com" --role="roles/cloudsql.client"
   3.3 배포
        - gcloud run deploy optdemo --image gcr.io/my-optimization-demo/optdemo --platform managed --region asia-northeast3 --allow-unauthenticated --add-cloudsql-instances my-optimization-demo:asia-northeast3:my-optimization-db --env-vars-file .env.yaml
        - gcloud run deploy 시 my-optimization-db에 Cloud SQL 인스턴스 입력
        - Cloud Run이 기대하는 형식은 YAML 또는 JSON만 가능하고 값은 "string" 만

######## Cloud Storage
1. Cloud Storage 버킷 생성
    - Google Cloud Console에서 Cloud Storage > 버킷 만들기 선택
    - 버킷 이름과 지역을 설정하고 버킷 생성 my-optimization-demo-bucket, asia-northeast3
    - 생성된 버킷 이름을 기록

2. collectstatic 명령을 Cloud Storage로 업로드
    2.1 Django는 기본적으로 로컬 파일 시스템에만 static을 저장.
        - Cloud Storage에 저장하려면 Django-storages 패키지를 사용
            * pip install django-storages
            * pip install google-cloud-storage
    2.2  settings.py에 Cloud Storage 설정 추가
        - INSTALLED_APPS = ['storages',] 추가
        - # 기본 STATIC_URL: 로컬 개발용
        STATIC_URL = os.environ.get('STATIC_URL', '/static/')
        - # Cloud Storage 사용 여부 (배포 환경)
        USE_GCS = os.environ.get('USE_GCS', 'False') == 'True'
        - if USE_GCS:
            # Cloud Storage 설정
            STATICFILES_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
            GS_BUCKET_NAME = os.environ['GS_BUCKET_NAME']
            STATIC_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/'
    2.3 env 파일 변경
        - .env.dev:
            USE_GCS=False
            STATIC_URL=/static/
        - .env.yaml
            USE_GCS: "True"
            GS_BUCKET_NAME: "my-optimization-demo-bucket"
            STATIC_URL: "https://storage.googleapis.com/my-optimization-demo-bucket/"

    2.3 Cloud Storage 버킷에 정적 파일 업로드
        - Django에서 collectstatic 명령을 실행하면, static 파일이 Cloud Storage에 업로드
        - python manage.py collectstatic
3 IAM 권한 설정
    - gcloud projects add-iam-policy-binding my-optimization-demo --member="serviceAccount:216727465560-compute@developer.gserviceaccount.com" --role="roles/storage.objectViewer"
    - 정적 파일을 모든 사용자에게 서빙하려면 퍼블릭 권한
        * gsutil iam ch allUsers:objectViewer gs://my-optimization-demo-bucket
4. Dockerfile에 collectstatic 추가 (기존에 포함)
    - RUN python manage.py collectstatic --noinput
5. Cloud Run 배포
    - docker build -t gcr.io/my-optimization-demo/optdemo .
    - docker push gcr.io/my-optimization-demo/optdemo
    - gcloud run deploy optdemo --image gcr.io/my-optimization-demo/optdemo --platform managed --region asia-northeast3 --allow-unauthenticated --add-cloudsql-instances my-optimization-demo:asia-northeast3:my-optimization-db --env-vars-file .env.yaml
    - https://optdemo-216727465560.asia-northeast3.run.app/static/css/style.css에 접속하여 static 파일이 로딩되는지 확인