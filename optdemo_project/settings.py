"""
Django settings for optdemo_project project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
import sys
from pathlib import Path
from dotenv import load_dotenv
if os.name == 'nt': # Windows인 경우
    import colorama
    colorama.init()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
STATIC_URL = os.environ.get('STATIC_URL', '/static/')
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# MEDIA_URL 및 MEDIA_ROOT 설정 (파일 업로드 시 필요에 따라 사용)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'
if not os.path.exists(MEDIA_ROOT):
    os.makedirs(MEDIA_ROOT)

DEMO_DIR = MEDIA_ROOT/ 'demo'
DEMO_DIR_MAP ={'matching_cf_tft_data':DEMO_DIR/'match_cf_tft_data',
            'matching_transport assignment_data':DEMO_DIR/'matching_transport assignment_data',
            'matching_resource skill_data':DEMO_DIR/'matching_resource skill_data',
            'allocation_datacenter_data':DEMO_DIR/'allocation_datacenter_data',
            'allocation_budget_data':DEMO_DIR/'allocation_budget_data',
            'allocation_nurse_rostering_data':DEMO_DIR/'allocation_nurse_rostering_data',
            'routing_vrp_data':DEMO_DIR/'routing_vrp_data',
            'routing_cvrp_data':DEMO_DIR/'routing_cvrp_data',
            'routing_pdp_data':DEMO_DIR/'routing_pdp_data',
            'production_lot_sizing_data':DEMO_DIR/'production_lot_sizing_data',
            'production_single_machine_data':DEMO_DIR/'production_single_machine_data',
            'production_flow_shop_data':DEMO_DIR/'production_flow_shop_data',
            'production_job_shop_data':DEMO_DIR/'production_job_shop_data',
            'production_rcpsp_data':DEMO_DIR/'production_rcpsp_data',
            'puzzles_diet_problem_data':DEMO_DIR/'puzzles_diet_problem_data',
            'puzzles_sports_scheduling_data':DEMO_DIR/'puzzles_sports_scheduling_data',
            'puzzles_tsp_data':DEMO_DIR/'puzzles_tsp_data',
            'puzzles_sudoku_data':DEMO_DIR/'puzzles_sudoku_data'
            }

# DEMO_DIR_MAP에 정의된 모든 디렉토리 생성 (없으면)
for demo_key, dir_path in DEMO_DIR_MAP.items():
    if not os.path.exists(dir_path):
        os.makedirs(dir_path, exist_ok=True)

# .env.local 파일이 있으면 로컬 개발 환경으로 간주하고 해당 파일을 로드합니다.
local_env_path = BASE_DIR / '.env.local'
if os.path.exists(local_env_path):
    load_dotenv(dotenv_path=local_env_path)
# 만약 .env.local이 없다면, docker-compose나 Cloud Run 등에서 주입된
# 시스템 환경 변수를 사용하게 되므로 추가적인 load_dotenv 호출이 필요 없습니다.

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY=os.environ.get('SECRET_KEY', 'django-insecure-5)=z06nprnb$ua_#)c**%n01&+*0%+d33lfqnl1l0n3qolcurx')
DEBUG=os.environ.get('DEBUG', 'False').upper()=='TRUE'
SAVE_DATA_FILE=os.environ.get('SAVE_DATA_FILE', 'False').upper()=='TRUE'
allowed_hosts_str=os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1')
ALLOWED_HOSTS = [host.strip() for host in allowed_hosts_str.split(',') if host.strip()]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
    'matching_assignment_app',
    'resource_allocation_app',
    'routing_logistics_app',
    'production_scheduling_app',
    'puzzles_logic_app',
    'storages',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'optdemo_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'optdemo_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASE_BACKEND = os.environ.get('DATABASE_BACKEND', 'postgres')

if 'sqlite3' in DATABASE_BACKEND:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
elif 'test' in sys.argv:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('SQL_DATABASE', 'testdb'),
            'USER': os.getenv('SQL_USER', 'testuser'),
            'PASSWORD': os.getenv('SQL_PASSWORD', 'testpass'),
            'HOST': os.getenv('SQL_HOST', 'localhost'),
            'PORT': os.getenv('SQL_PORT', '5432'),
        }
    }
elif DATABASE_BACKEND == 'postgresql':
    DATABASES = {
        'default': {
            'ENGINE': os.environ.get('SQL_ENGINE', 'django.db.backends.sqlite3'),
            'NAME': os.environ.get('SQL_DATABASE', BASE_DIR / 'db.sqlite3'),
            'USER': os.environ.get('SQL_USER'),
            'PASSWORD': os.environ.get('SQL_PASSWORD'),
            'HOST': os.environ.get('SQL_HOST'),
            'PORT': os.environ.get('SQL_PORT'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ==============================================================================
# Logging Configuration
# ==============================================================================
LOGGING_CONFIG_MODULE_PATH = 'optdemo_project.logging_config'
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'debug_colored': {
            # '()'는 사용할 포맷터 클래스의 경로를 지정합니다.
            '()': f'{LOGGING_CONFIG_MODULE_PATH}.ColoredFormatter',
            'format': '[%(asctime)s] [%(levelname)s] %(name)s: %(message)s', # debug_format
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'info_colored': {
            '()': f'{LOGGING_CONFIG_MODULE_PATH}.ColoredFormatter',
            'format': '[%(asctime)s] [%(levelname)s] %(message)s', # info_format
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'solve_colored': {
            '()': f'{LOGGING_CONFIG_MODULE_PATH}.ColoredFormatter',
            'format': '[%(asctime)s] [%(levelname)s] %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        # 파일용 기본 포맷터 (색상 코드 없이)
        'file_verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'file_simple': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
        'file_solve': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
    },
    'filters': {
        'debug_only': {
            # '()'는 사용할 필터 클래스의 경로를 지정합니다.
            '()': f'{LOGGING_CONFIG_MODULE_PATH}.LevelFilter',
            'level': 'DEBUG', # logging.DEBUG 값을 직접 쓰기보다 문자열로 지정
        },
        'solve_only': {
            '()': f'{LOGGING_CONFIG_MODULE_PATH}.LevelFilter',
            'level': 'SOLVE', # 문자열로 'SOLVE' 지정
        },
        # INFO 레벨만 처리하는 필터 (선택 사항)
        # 'info_only': {
        #     '()': f'{LOGGING_CONFIG_MODULE_PATH}.LevelFilter',
        #     'level': 'INFO',
        # },
    },
    'handlers': {
        'console_debug': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'debug_colored',
            'filters': ['debug_only'], # DEBUG 레벨 로그만 이 핸들러가 처리
        },
        'console_info_plus': { # INFO 레벨 이상
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'info_colored',
            # 이 핸들러는 DEBUG를 제외한 INFO, WARNING, ERROR, CRITICAL을 처리
            # 별도 필터 없으면 INFO 이상 모두 처리
        },
        'console_solve': {
            'level': 'SOLVE',
            'class': 'logging.StreamHandler',
            'formatter': 'solve_colored',
            'filters': ['solve_only'], # SOLVE 레벨 로그만 이 핸들러가 처리
        },
        'file_app': { # 애플리케이션 로그 파일 핸들러
            'level': 'DEBUG',
            'class': f'{LOGGING_CONFIG_MODULE_PATH}.SafeRotatingFileHandler',
            # 'class': 'logging.handlers.RotatingFileHandler', # 파일 크기 기반 로테이션
            'filename': BASE_DIR / 'logs/app.log', # 로그 파일 경로
            'maxBytes': 1024*1024*5, # 5 MB
            'backupCount': 5, # 최대 5개 백업 파일 유지
            'formatter': 'file_verbose', # 파일에는 상세한 형식 사용
            'encoding': 'utf-8', # UTF-8 인코딩 사용
        },
        'file_solve': { # SOLVE 레벨 로그 파일 핸들러
            'level': 'SOLVE', # SOLVE 레벨만 기록
            'class': f'{LOGGING_CONFIG_MODULE_PATH}.SafeRotatingFileHandler',
            'filename': BASE_DIR / 'logs/solve.log', # SOLVE 로그 파일 경로
            'maxBytes': 1024*1024*2, # 2 MB (필요에 따라 조절)
            'backupCount': 3, # 최대 3개 백업 파일 유지
            'formatter': 'file_solve', # 또는 'file_simple' 등 원하는 포맷터 사용
            'encoding': 'utf-8',
            'filters': ['solve_only'], # 이 핸들러는 SOLVE 레벨 로그만 처리
        },
    },
    'root': {  # 루트 로거 설정: 모든 로거의 기본 설정
        'handlers': ['console_debug', 'console_info_plus', 'console_solve', 'file_app','file_solve'],  # 사용할 핸들러 지정
        'level': 'DEBUG',  # 루트 로거의 레벨을 DEBUG로 설정해야 하위 핸들러들이 동작 가능
    },
    'loggers': {
        'django': {# Django 프레임워크 로그
            'handlers': ['console_info_plus', 'file_app'],
            'level': 'INFO',# INFO 레벨 이상만 기록
            'propagate': False,
        },
        # 개발 시 DEBUG, 운영 시 INFO 로 변경 가능
        'core': {
             'handlers': ['console_info_plus'],
             'level': 'INFO',
             'propagate': False,
        },
        'matching_assignment_app': {
            'handlers': ['console_debug', 'console_info_plus', 'console_solve', 'file_app', 'file_solve'],
            'level': 'INFO',
            'propagate': False,
        },
        'resource_allocation_app': {
            'handlers': ['console_debug', 'console_info_plus', 'console_solve', 'file_app', 'file_solve'],
            'level': 'INFO',
            'propagate': False,
        },
        'routing_logistics_app': {
            'handlers': ['console_debug', 'console_info_plus', 'console_solve', 'file_app', 'file_solve'],
            'level': 'INFO',
            'propagate': False,
        },
        'production_scheduling_app': {
            'handlers': ['console_debug', 'console_info_plus', 'console_solve', 'file_app', 'file_solve'],
            'level': 'INFO',
            'propagate': False,
        },
        'puzzles_logic_app': {
            'handlers': ['console_debug', 'console_info_plus', 'console_solve', 'file_app', 'file_solve'],
            'level': 'INFO',
            'propagate': False,
        },
        'common_utils': {
            'handlers': ['console_debug', 'console_info_plus', 'console_solve', 'file_app', 'file_solve'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# 로그 디렉토리 생성 (없으면)
LOGS_DIR = BASE_DIR / 'logs'
LOGS_DIR.mkdir(parents=True, exist_ok=True)

SOLVER_ORTOOLS = 'ORTOOLS'
ORTOOLS_TIME_LIMIT=180
SOLVER_GUROBI = 'GUROBI'
GUROBI_TIME_LIMIT=60

# GCS(Google Cloud Storage) 사용 여부 (배포 환경)
USE_GCS = os.environ.get('USE_GCS', 'False') == 'True'

if USE_GCS:
    # Cloud Storage 설정
    STATICFILES_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
    GS_BUCKET_NAME = os.environ['GS_BUCKET_NAME']
    STATIC_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/'
    USE_GCS_MEDIA = os.environ.get('USE_GCS_MEDIA', 'False') == 'True'
    if USE_GCS_MEDIA:
        MEDIA_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/media/'

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')