"""
Django settings for optdemo_project project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
STATIC_URL = '/static/'

# MEDIA_URL 및 MEDIA_ROOT 설정 (파일 업로드 시 필요에 따라 사용)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'
if not os.path.exists(MEDIA_ROOT):
    os.makedirs(MEDIA_ROOT)

DEMO_DIR = MEDIA_ROOT/ 'demo'
DEMO_DIR_MAP ={'matching_cf_tft_data':DEMO_DIR/'match_cf_tft_data',
               'matching_transport_data':DEMO_DIR/'matching_transport_data',
               'matching_resource_data':DEMO_DIR/'matching_resource_data',
               'allocation_datacenter_data':DEMO_DIR/'allocation_datacenter_data',
               'allocation_budjet_data':DEMO_DIR/'allocation_budjet_data',
               'routing_vrp_data':DEMO_DIR/'routing_vrp_data',
               'routing_cvrp_data':DEMO_DIR/'routing_cvrp_data',
               'routing_pdp_data':DEMO_DIR/'routing_pdp_data'}

# DEMO_DIR_MAP에 정의된 모든 디렉토리 생성 (없으면)
for demo_key, dir_path in DEMO_DIR_MAP.items():
    if not os.path.exists(dir_path):
        os.makedirs(dir_path, exist_ok=True)


dotenv_path = BASE_DIR / '.env'
load_dotenv(dotenv_path=dotenv_path)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY=os.environ.get('SECRET_KEY', 'django-insecure-5)=z06nprnb$ua_#)c**%n01&+*0%+d33lfqnl1l0n3qolcurx')
DEBUG=os.environ.get('DEBUG', 'False').upper()=='TRUE'
allowed_hosts_str=os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1')
ALLOWED_HOSTS = [host.strip() for host in allowed_hosts_str.split(',') if host.strip()]
# ALLOWED_HOSTS = ['opt-demo-462706.an.r.appspot.com']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',          # core 앱 추가
    'matching_assignment_app',  # matching_assignment_app 추가
    'resource_allocation_app',  # 예시
    'routing_logistics_app',  # 예시
    'production_scheduling_app',  # 예시
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'optdemo_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'optdemo_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ==============================================================================
# Logging Configuration
# ==============================================================================
LOGGING_CONFIG_MODULE_PATH = 'optdemo_project.logging_config'
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'debug_colored': {
            # '()'는 사용할 포맷터 클래스의 경로를 지정합니다.
            '()': f'{LOGGING_CONFIG_MODULE_PATH}.ColoredFormatter',
            'format': '[%(asctime)s] [%(levelname)s] %(name)s: %(message)s', # debug_format
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'info_colored': {
            '()': f'{LOGGING_CONFIG_MODULE_PATH}.ColoredFormatter',
            'format': '[%(asctime)s] [%(levelname)s] %(message)s', # info_format
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'solve_colored': {
            '()': f'{LOGGING_CONFIG_MODULE_PATH}.ColoredFormatter',
            'format': '[%(asctime)s] [%(levelname)s] %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        # 파일용 기본 포맷터 (색상 코드 없이)
        'file_verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'file_simple': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
        'file_solve': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
    },
    'filters': {
        'debug_only': {
            # '()'는 사용할 필터 클래스의 경로를 지정합니다.
            '()': f'{LOGGING_CONFIG_MODULE_PATH}.LevelFilter',
            'level': 'DEBUG', # logging.DEBUG 값을 직접 쓰기보다 문자열로 지정
        },
        'solve_only': {
            '()': f'{LOGGING_CONFIG_MODULE_PATH}.LevelFilter',
            'level': 'SOLVE', # 문자열로 'SOLVE' 지정
        },
        # INFO 레벨만 처리하는 필터 (선택 사항)
        # 'info_only': {
        #     '()': f'{LOGGING_CONFIG_MODULE_PATH}.LevelFilter',
        #     'level': 'INFO',
        # },
    },
    'handlers': {
        'console_debug': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'debug_colored',
            'filters': ['debug_only'], # DEBUG 레벨 로그만 이 핸들러가 처리
        },
        'console_info_plus': { # INFO 레벨 이상
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'info_colored',
            # 이 핸들러는 DEBUG를 제외한 INFO, WARNING, ERROR, CRITICAL을 처리
            # 별도 필터 없으면 INFO 이상 모두 처리
        },
        'console_solve': {
            'level': 'SOLVE',
            'class': 'logging.StreamHandler',
            'formatter': 'solve_colored',
            'filters': ['solve_only'], # SOLVE 레벨 로그만 이 핸들러가 처리
        },
        'file_app': { # 애플리케이션 로그 파일 핸들러
            'level': 'DEBUG',
            'class': f'{LOGGING_CONFIG_MODULE_PATH}.SafeRotatingFileHandler',
            # 'class': 'logging.handlers.RotatingFileHandler', # 파일 크기 기반 로테이션
            'filename': BASE_DIR / 'logs/app.log', # 로그 파일 경로
            'maxBytes': 1024*1024*5, # 5 MB
            'backupCount': 5, # 최대 5개 백업 파일 유지
            'formatter': 'file_verbose', # 파일에는 상세한 형식 사용
            'encoding': 'utf-8', # UTF-8 인코딩 사용
        },
        'file_solve': { # SOLVE 레벨 로그 파일 핸들러
            'level': 'SOLVE', # SOLVE 레벨만 기록
            'class': f'{LOGGING_CONFIG_MODULE_PATH}.SafeRotatingFileHandler',
            'filename': BASE_DIR / 'logs/solve.log', # SOLVE 로그 파일 경로
            'maxBytes': 1024*1024*2, # 2 MB (필요에 따라 조절)
            'backupCount': 3, # 최대 3개 백업 파일 유지
            'formatter': 'file_solve', # 또는 'file_simple' 등 원하는 포맷터 사용
            'encoding': 'utf-8',
            'filters': ['solve_only'], # 이 핸들러는 SOLVE 레벨 로그만 처리
        },
    },
    'root': {  # 루트 로거 설정: 모든 로거의 기본 설정
        'handlers': ['console_debug', 'console_info_plus', 'console_solve', 'file_app','file_solve'],  # 사용할 핸들러 지정
        'level': 'DEBUG',  # 루트 로거의 레벨을 DEBUG로 설정해야 하위 핸들러들이 동작 가능
    },
    'loggers': {
        'django': { # Django 프레임워크 로그
            'handlers': ['console_info_plus', 'file_app'],
            'level': 'INFO', # INFO 레벨 이상만 기록
            'propagate': False,
        },
        'core': {
             'handlers': ['console_info_plus'],
             'level': 'INFO',
             'propagate': False,
        },
        'matching_assignment_app': { # 우리 앱 로거
            'handlers': ['console_debug', 'console_info_plus', 'console_solve', 'file_app', 'file_solve'],
            'level': 'DEBUG', # 개발 시 DEBUG, 운영 시 INFO 로 변경 가능
            'propagate': False,
        },
        'resource_allocation_app': { # 우리 앱 로거
            'handlers': ['console_debug', 'console_info_plus', 'console_solve', 'file_app', 'file_solve'],
            'level': 'SOLVE', # 개발 시 DEBUG, 운영 시 INFO 로 변경 가능
            'propagate': False,
        },
        'routing_logistics_app': { # 우리 앱 로거
            'handlers': ['console_debug', 'console_info_plus', 'console_solve', 'file_app', 'file_solve'],
            'level': 'DEBUG', # 개발 시 DEBUG, 운영 시 INFO 로 변경 가능
            'propagate': False,
        },
        'production_scheduling_app': { # 우리 앱 로거
            'handlers': ['console_debug', 'console_info_plus', 'console_solve', 'file_app', 'file_solve'],
            'level': 'INFO', # 개발 시 DEBUG, 운영 시 INFO 로 변경 가능
            'propagate': False,
        },
    },
}

# 로그 디렉토리 생성 (없으면)
LOGS_DIR = BASE_DIR / 'logs'
LOGS_DIR.mkdir(parents=True, exist_ok=True)